/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceService } from "../service.service";
import { ServiceCreateInput } from "./ServiceCreateInput";
import { Service } from "./Service";
import { ServiceFindManyArgs } from "./ServiceFindManyArgs";
import { ServiceWhereUniqueInput } from "./ServiceWhereUniqueInput";
import { ServiceUpdateInput } from "./ServiceUpdateInput";
import { AppointmentServiceFindManyArgs } from "../../appointmentService/base/AppointmentServiceFindManyArgs";
import { AppointmentService } from "../../appointmentService/base/AppointmentService";
import { AppointmentServiceWhereUniqueInput } from "../../appointmentService/base/AppointmentServiceWhereUniqueInput";
import { ServiceStaffTypeFindManyArgs } from "../../serviceStaffType/base/ServiceStaffTypeFindManyArgs";
import { ServiceStaffType } from "../../serviceStaffType/base/ServiceStaffType";
import { ServiceStaffTypeWhereUniqueInput } from "../../serviceStaffType/base/ServiceStaffTypeWhereUniqueInput";
import { StaffServiceCustomFindManyArgs } from "../../staffServiceCustom/base/StaffServiceCustomFindManyArgs";
import { StaffServiceCustom } from "../../staffServiceCustom/base/StaffServiceCustom";
import { StaffServiceCustomWhereUniqueInput } from "../../staffServiceCustom/base/StaffServiceCustomWhereUniqueInput";

export class ServiceControllerBase {
  constructor(protected readonly service: ServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Service })
  async createService(
    @common.Body() data: ServiceCreateInput
  ): Promise<Service> {
    return await this.service.createService({
      data: data,
      select: {
        activo: true,
        categoria: true,
        createdAt: true,
        descripcion: true,
        duracionBaseMinutos: true,
        id: true,
        nombre: true,
        precioBase: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Service] })
  @ApiNestedQuery(ServiceFindManyArgs)
  async services(@common.Req() request: Request): Promise<Service[]> {
    const args = plainToClass(ServiceFindManyArgs, request.query);
    return this.service.services({
      ...args,
      select: {
        activo: true,
        categoria: true,
        createdAt: true,
        descripcion: true,
        duracionBaseMinutos: true,
        id: true,
        nombre: true,
        precioBase: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async service(
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Service | null> {
    const result = await this.service.service({
      where: params,
      select: {
        activo: true,
        categoria: true,
        createdAt: true,
        descripcion: true,
        duracionBaseMinutos: true,
        id: true,
        nombre: true,
        precioBase: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateService(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() data: ServiceUpdateInput
  ): Promise<Service | null> {
    try {
      return await this.service.updateService({
        where: params,
        data: data,
        select: {
          activo: true,
          categoria: true,
          createdAt: true,
          descripcion: true,
          duracionBaseMinutos: true,
          id: true,
          nombre: true,
          precioBase: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteService(
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Service | null> {
    try {
      return await this.service.deleteService({
        where: params,
        select: {
          activo: true,
          categoria: true,
          createdAt: true,
          descripcion: true,
          duracionBaseMinutos: true,
          id: true,
          nombre: true,
          precioBase: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/appointmentServices")
  @ApiNestedQuery(AppointmentServiceFindManyArgs)
  async findAppointmentServices(
    @common.Req() request: Request,
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<AppointmentService[]> {
    const query = plainToClass(AppointmentServiceFindManyArgs, request.query);
    const results = await this.service.findAppointmentServices(params.id, {
      ...query,
      select: {
        appointments: {
          select: {
            id: true,
          },
        },

        duracionFinalMinutos: true,
        estado: true,
        fechaAgregado: true,
        id: true,
        notas: true,
        precioFinal: true,

        services: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointmentServices")
  async connectAppointmentServices(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: AppointmentServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentServices: {
        connect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointmentServices")
  async updateAppointmentServices(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: AppointmentServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentServices: {
        set: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointmentServices")
  async disconnectAppointmentServices(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: AppointmentServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentServices: {
        disconnect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/serviceStaffTypes")
  @ApiNestedQuery(ServiceStaffTypeFindManyArgs)
  async findServiceStaffTypes(
    @common.Req() request: Request,
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<ServiceStaffType[]> {
    const query = plainToClass(ServiceStaffTypeFindManyArgs, request.query);
    const results = await this.service.findServiceStaffTypes(params.id, {
      ...query,
      select: {
        id: true,

        services: {
          select: {
            id: true,
          },
        },

        staffTypes: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/serviceStaffTypes")
  async connectServiceStaffTypes(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ServiceStaffTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStaffTypes: {
        connect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/serviceStaffTypes")
  async updateServiceStaffTypes(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ServiceStaffTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStaffTypes: {
        set: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/serviceStaffTypes")
  async disconnectServiceStaffTypes(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ServiceStaffTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStaffTypes: {
        disconnect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/staffServiceCustom")
  @ApiNestedQuery(StaffServiceCustomFindManyArgs)
  async findStaffServiceCustom(
    @common.Req() request: Request,
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<StaffServiceCustom[]> {
    const query = plainToClass(StaffServiceCustomFindManyArgs, request.query);
    const results = await this.service.findStaffServiceCustom(params.id, {
      ...query,
      select: {
        duracionCustomMinutos: true,
        id: true,
        precioCustom: true,

        services: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/staffServiceCustom")
  async connectStaffServiceCustom(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: StaffServiceCustomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffServiceCustom: {
        connect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/staffServiceCustom")
  async updateStaffServiceCustom(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: StaffServiceCustomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffServiceCustom: {
        set: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/staffServiceCustom")
  async disconnectStaffServiceCustom(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: StaffServiceCustomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffServiceCustom: {
        disconnect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }
}
