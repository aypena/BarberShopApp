/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AppointmentServiceService } from "../appointmentService.service";
import { AppointmentServiceCreateInput } from "./AppointmentServiceCreateInput";
import { AppointmentService } from "./AppointmentService";
import { AppointmentServiceFindManyArgs } from "./AppointmentServiceFindManyArgs";
import { AppointmentServiceWhereUniqueInput } from "./AppointmentServiceWhereUniqueInput";
import { AppointmentServiceUpdateInput } from "./AppointmentServiceUpdateInput";

export class AppointmentServiceControllerBase {
  constructor(protected readonly service: AppointmentServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AppointmentService })
  async createAppointmentService(
    @common.Body() data: AppointmentServiceCreateInput
  ): Promise<AppointmentService> {
    return await this.service.createAppointmentService({
      data: {
        ...data,

        appointments: {
          connect: data.appointments,
        },

        services: {
          connect: data.services,
        },

        users: data.users
          ? {
              connect: data.users,
            }
          : undefined,
      },
      select: {
        appointments: {
          select: {
            id: true,
          },
        },

        duracionFinalMinutos: true,
        estado: true,
        fechaAgregado: true,
        id: true,
        notas: true,
        precioFinal: true,

        services: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AppointmentService] })
  @ApiNestedQuery(AppointmentServiceFindManyArgs)
  async appointmentServices(
    @common.Req() request: Request
  ): Promise<AppointmentService[]> {
    const args = plainToClass(AppointmentServiceFindManyArgs, request.query);
    return this.service.appointmentServices({
      ...args,
      select: {
        appointments: {
          select: {
            id: true,
          },
        },

        duracionFinalMinutos: true,
        estado: true,
        fechaAgregado: true,
        id: true,
        notas: true,
        precioFinal: true,

        services: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AppointmentService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async appointmentService(
    @common.Param() params: AppointmentServiceWhereUniqueInput
  ): Promise<AppointmentService | null> {
    const result = await this.service.appointmentService({
      where: params,
      select: {
        appointments: {
          select: {
            id: true,
          },
        },

        duracionFinalMinutos: true,
        estado: true,
        fechaAgregado: true,
        id: true,
        notas: true,
        precioFinal: true,

        services: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AppointmentService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAppointmentService(
    @common.Param() params: AppointmentServiceWhereUniqueInput,
    @common.Body() data: AppointmentServiceUpdateInput
  ): Promise<AppointmentService | null> {
    try {
      return await this.service.updateAppointmentService({
        where: params,
        data: {
          ...data,

          appointments: {
            connect: data.appointments,
          },

          services: {
            connect: data.services,
          },

          users: data.users
            ? {
                connect: data.users,
              }
            : undefined,
        },
        select: {
          appointments: {
            select: {
              id: true,
            },
          },

          duracionFinalMinutos: true,
          estado: true,
          fechaAgregado: true,
          id: true,
          notas: true,
          precioFinal: true,

          services: {
            select: {
              id: true,
            },
          },

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AppointmentService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAppointmentService(
    @common.Param() params: AppointmentServiceWhereUniqueInput
  ): Promise<AppointmentService | null> {
    try {
      return await this.service.deleteAppointmentService({
        where: params,
        select: {
          appointments: {
            select: {
              id: true,
            },
          },

          duracionFinalMinutos: true,
          estado: true,
          fechaAgregado: true,
          id: true,
          notas: true,
          precioFinal: true,

          services: {
            select: {
              id: true,
            },
          },

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
