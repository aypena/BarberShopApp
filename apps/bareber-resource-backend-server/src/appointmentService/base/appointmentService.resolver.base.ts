/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AppointmentService } from "./AppointmentService";
import { AppointmentServiceCountArgs } from "./AppointmentServiceCountArgs";
import { AppointmentServiceFindManyArgs } from "./AppointmentServiceFindManyArgs";
import { AppointmentServiceFindUniqueArgs } from "./AppointmentServiceFindUniqueArgs";
import { CreateAppointmentServiceArgs } from "./CreateAppointmentServiceArgs";
import { UpdateAppointmentServiceArgs } from "./UpdateAppointmentServiceArgs";
import { DeleteAppointmentServiceArgs } from "./DeleteAppointmentServiceArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { Service } from "../../service/base/Service";
import { User } from "../../user/base/User";
import { AppointmentServiceService } from "../appointmentService.service";
@graphql.Resolver(() => AppointmentService)
export class AppointmentServiceResolverBase {
  constructor(protected readonly service: AppointmentServiceService) {}

  async _appointmentServicesMeta(
    @graphql.Args() args: AppointmentServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AppointmentService])
  async appointmentServices(
    @graphql.Args() args: AppointmentServiceFindManyArgs
  ): Promise<AppointmentService[]> {
    return this.service.appointmentServices(args);
  }

  @graphql.Query(() => AppointmentService, { nullable: true })
  async appointmentService(
    @graphql.Args() args: AppointmentServiceFindUniqueArgs
  ): Promise<AppointmentService | null> {
    const result = await this.service.appointmentService(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AppointmentService)
  async createAppointmentService(
    @graphql.Args() args: CreateAppointmentServiceArgs
  ): Promise<AppointmentService> {
    return await this.service.createAppointmentService({
      ...args,
      data: {
        ...args.data,

        appointments: {
          connect: args.data.appointments,
        },

        services: {
          connect: args.data.services,
        },

        users: args.data.users
          ? {
              connect: args.data.users,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AppointmentService)
  async updateAppointmentService(
    @graphql.Args() args: UpdateAppointmentServiceArgs
  ): Promise<AppointmentService | null> {
    try {
      return await this.service.updateAppointmentService({
        ...args,
        data: {
          ...args.data,

          appointments: {
            connect: args.data.appointments,
          },

          services: {
            connect: args.data.services,
          },

          users: args.data.users
            ? {
                connect: args.data.users,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppointmentService)
  async deleteAppointmentService(
    @graphql.Args() args: DeleteAppointmentServiceArgs
  ): Promise<AppointmentService | null> {
    try {
      return await this.service.deleteAppointmentService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Appointment, {
    nullable: true,
    name: "appointments",
  })
  async getAppointments(
    @graphql.Parent() parent: AppointmentService
  ): Promise<Appointment | null> {
    const result = await this.service.getAppointments(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Service, {
    nullable: true,
    name: "services",
  })
  async getServices(
    @graphql.Parent() parent: AppointmentService
  ): Promise<Service | null> {
    const result = await this.service.getServices(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "users",
  })
  async getUsers(
    @graphql.Parent() parent: AppointmentService
  ): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
