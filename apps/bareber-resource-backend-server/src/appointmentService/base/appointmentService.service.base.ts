/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AppointmentService as PrismaAppointmentService,
  Appointment as PrismaAppointment,
  Service as PrismaService,
  User as PrismaUser,
} from "@prisma/client";

export class AppointmentServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AppointmentServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.appointmentService.count(args);
  }

  async appointmentServices(
    args: Prisma.AppointmentServiceFindManyArgs
  ): Promise<PrismaAppointmentService[]> {
    return this.prisma.appointmentService.findMany(args);
  }
  async appointmentService(
    args: Prisma.AppointmentServiceFindUniqueArgs
  ): Promise<PrismaAppointmentService | null> {
    return this.prisma.appointmentService.findUnique(args);
  }
  async createAppointmentService(
    args: Prisma.AppointmentServiceCreateArgs
  ): Promise<PrismaAppointmentService> {
    return this.prisma.appointmentService.create(args);
  }
  async updateAppointmentService(
    args: Prisma.AppointmentServiceUpdateArgs
  ): Promise<PrismaAppointmentService> {
    return this.prisma.appointmentService.update(args);
  }
  async deleteAppointmentService(
    args: Prisma.AppointmentServiceDeleteArgs
  ): Promise<PrismaAppointmentService> {
    return this.prisma.appointmentService.delete(args);
  }

  async getAppointments(parentId: string): Promise<PrismaAppointment | null> {
    return this.prisma.appointmentService
      .findUnique({
        where: { id: parentId },
      })
      .appointments();
  }

  async getServices(parentId: string): Promise<PrismaService | null> {
    return this.prisma.appointmentService
      .findUnique({
        where: { id: parentId },
      })
      .services();
  }

  async getUsers(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.appointmentService
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
