/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Appointment } from "../../appointment/base/Appointment";

import {
  ValidateNested,
  IsInt,
  Max,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  IsNumber,
} from "class-validator";

import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { Service } from "../../service/base/Service";
import { User } from "../../user/base/User";

@ObjectType()
class AppointmentService {
  @ApiProperty({
    required: true,
    type: () => Appointment,
  })
  @ValidateNested()
  @Type(() => Appointment)
  appointments?: Appointment;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  duracionFinalMinutos!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  estado!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaAgregado!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  notas!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  precioFinal!: Decimal | null;

  @ApiProperty({
    required: true,
    type: () => Service,
  })
  @ValidateNested()
  @Type(() => Service)
  services?: Service;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  users?: User | null;
}

export { AppointmentService as AppointmentService };
