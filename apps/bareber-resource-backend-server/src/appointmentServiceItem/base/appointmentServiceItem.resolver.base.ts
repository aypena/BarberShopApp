/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AppointmentServiceItem } from "./AppointmentServiceItem";
import { AppointmentServiceItemCountArgs } from "./AppointmentServiceItemCountArgs";
import { AppointmentServiceItemFindManyArgs } from "./AppointmentServiceItemFindManyArgs";
import { AppointmentServiceItemFindUniqueArgs } from "./AppointmentServiceItemFindUniqueArgs";
import { CreateAppointmentServiceItemArgs } from "./CreateAppointmentServiceItemArgs";
import { UpdateAppointmentServiceItemArgs } from "./UpdateAppointmentServiceItemArgs";
import { DeleteAppointmentServiceItemArgs } from "./DeleteAppointmentServiceItemArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { ServiceEntity } from "../../serviceEntity/base/ServiceEntity";
import { User } from "../../user/base/User";
import { AppointmentServiceItemService } from "../appointmentServiceItem.service";
@graphql.Resolver(() => AppointmentServiceItem)
export class AppointmentServiceItemResolverBase {
  constructor(protected readonly service: AppointmentServiceItemService) {}

  async _appointmentServiceItemsMeta(
    @graphql.Args() args: AppointmentServiceItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AppointmentServiceItem])
  async appointmentServiceItems(
    @graphql.Args() args: AppointmentServiceItemFindManyArgs
  ): Promise<AppointmentServiceItem[]> {
    return this.service.appointmentServiceItems(args);
  }

  @graphql.Query(() => AppointmentServiceItem, { nullable: true })
  async appointmentServiceItem(
    @graphql.Args() args: AppointmentServiceItemFindUniqueArgs
  ): Promise<AppointmentServiceItem | null> {
    const result = await this.service.appointmentServiceItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AppointmentServiceItem)
  async createAppointmentServiceItem(
    @graphql.Args() args: CreateAppointmentServiceItemArgs
  ): Promise<AppointmentServiceItem> {
    return await this.service.createAppointmentServiceItem({
      ...args,
      data: {
        ...args.data,

        appointment: {
          connect: args.data.appointment,
        },

        serviceEntity: {
          connect: args.data.serviceEntity,
        },

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AppointmentServiceItem)
  async updateAppointmentServiceItem(
    @graphql.Args() args: UpdateAppointmentServiceItemArgs
  ): Promise<AppointmentServiceItem | null> {
    try {
      return await this.service.updateAppointmentServiceItem({
        ...args,
        data: {
          ...args.data,

          appointment: {
            connect: args.data.appointment,
          },

          serviceEntity: {
            connect: args.data.serviceEntity,
          },

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppointmentServiceItem)
  async deleteAppointmentServiceItem(
    @graphql.Args() args: DeleteAppointmentServiceItemArgs
  ): Promise<AppointmentServiceItem | null> {
    try {
      return await this.service.deleteAppointmentServiceItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Appointment, {
    nullable: true,
    name: "appointment",
  })
  async getAppointment(
    @graphql.Parent() parent: AppointmentServiceItem
  ): Promise<Appointment | null> {
    const result = await this.service.getAppointment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ServiceEntity, {
    nullable: true,
    name: "serviceEntity",
  })
  async getServiceEntity(
    @graphql.Parent() parent: AppointmentServiceItem
  ): Promise<ServiceEntity | null> {
    const result = await this.service.getServiceEntity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: AppointmentServiceItem
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
