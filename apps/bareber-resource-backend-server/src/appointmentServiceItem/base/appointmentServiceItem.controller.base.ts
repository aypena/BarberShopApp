/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AppointmentServiceItemService } from "../appointmentServiceItem.service";
import { AppointmentServiceItemCreateInput } from "./AppointmentServiceItemCreateInput";
import { AppointmentServiceItem } from "./AppointmentServiceItem";
import { AppointmentServiceItemFindManyArgs } from "./AppointmentServiceItemFindManyArgs";
import { AppointmentServiceItemWhereUniqueInput } from "./AppointmentServiceItemWhereUniqueInput";
import { AppointmentServiceItemUpdateInput } from "./AppointmentServiceItemUpdateInput";

export class AppointmentServiceItemControllerBase {
  constructor(protected readonly service: AppointmentServiceItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AppointmentServiceItem })
  async createAppointmentServiceItem(
    @common.Body() data: AppointmentServiceItemCreateInput
  ): Promise<AppointmentServiceItem> {
    return await this.service.createAppointmentServiceItem({
      data: {
        ...data,

        appointment: {
          connect: data.appointment,
        },

        serviceEntity: {
          connect: data.serviceEntity,
        },

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        appointment: {
          select: {
            id: true,
          },
        },

        duracionFinalMinutos: true,
        estado: true,
        fechaAgregado: true,
        id: true,
        notas: true,
        precioFinal: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AppointmentServiceItem] })
  @ApiNestedQuery(AppointmentServiceItemFindManyArgs)
  async appointmentServiceItems(
    @common.Req() request: Request
  ): Promise<AppointmentServiceItem[]> {
    const args = plainToClass(
      AppointmentServiceItemFindManyArgs,
      request.query
    );
    return this.service.appointmentServiceItems({
      ...args,
      select: {
        appointment: {
          select: {
            id: true,
          },
        },

        duracionFinalMinutos: true,
        estado: true,
        fechaAgregado: true,
        id: true,
        notas: true,
        precioFinal: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AppointmentServiceItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async appointmentServiceItem(
    @common.Param() params: AppointmentServiceItemWhereUniqueInput
  ): Promise<AppointmentServiceItem | null> {
    const result = await this.service.appointmentServiceItem({
      where: params,
      select: {
        appointment: {
          select: {
            id: true,
          },
        },

        duracionFinalMinutos: true,
        estado: true,
        fechaAgregado: true,
        id: true,
        notas: true,
        precioFinal: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AppointmentServiceItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAppointmentServiceItem(
    @common.Param() params: AppointmentServiceItemWhereUniqueInput,
    @common.Body() data: AppointmentServiceItemUpdateInput
  ): Promise<AppointmentServiceItem | null> {
    try {
      return await this.service.updateAppointmentServiceItem({
        where: params,
        data: {
          ...data,

          appointment: {
            connect: data.appointment,
          },

          serviceEntity: {
            connect: data.serviceEntity,
          },

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          appointment: {
            select: {
              id: true,
            },
          },

          duracionFinalMinutos: true,
          estado: true,
          fechaAgregado: true,
          id: true,
          notas: true,
          precioFinal: true,

          serviceEntity: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AppointmentServiceItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAppointmentServiceItem(
    @common.Param() params: AppointmentServiceItemWhereUniqueInput
  ): Promise<AppointmentServiceItem | null> {
    try {
      return await this.service.deleteAppointmentServiceItem({
        where: params,
        select: {
          appointment: {
            select: {
              id: true,
            },
          },

          duracionFinalMinutos: true,
          estado: true,
          fechaAgregado: true,
          id: true,
          notas: true,
          precioFinal: true,

          serviceEntity: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
