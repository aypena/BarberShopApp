/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AppointmentServiceItem as PrismaAppointmentServiceItem,
  Appointment as PrismaAppointment,
  ServiceEntity as PrismaServiceEntity,
  User as PrismaUser,
} from "@prisma/client";

export class AppointmentServiceItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AppointmentServiceItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.appointmentServiceItem.count(args);
  }

  async appointmentServiceItems(
    args: Prisma.AppointmentServiceItemFindManyArgs
  ): Promise<PrismaAppointmentServiceItem[]> {
    return this.prisma.appointmentServiceItem.findMany(args);
  }
  async appointmentServiceItem(
    args: Prisma.AppointmentServiceItemFindUniqueArgs
  ): Promise<PrismaAppointmentServiceItem | null> {
    return this.prisma.appointmentServiceItem.findUnique(args);
  }
  async createAppointmentServiceItem(
    args: Prisma.AppointmentServiceItemCreateArgs
  ): Promise<PrismaAppointmentServiceItem> {
    return this.prisma.appointmentServiceItem.create(args);
  }
  async updateAppointmentServiceItem(
    args: Prisma.AppointmentServiceItemUpdateArgs
  ): Promise<PrismaAppointmentServiceItem> {
    return this.prisma.appointmentServiceItem.update(args);
  }
  async deleteAppointmentServiceItem(
    args: Prisma.AppointmentServiceItemDeleteArgs
  ): Promise<PrismaAppointmentServiceItem> {
    return this.prisma.appointmentServiceItem.delete(args);
  }

  async getAppointment(parentId: string): Promise<PrismaAppointment | null> {
    return this.prisma.appointmentServiceItem
      .findUnique({
        where: { id: parentId },
      })
      .appointment();
  }

  async getServiceEntity(
    parentId: string
  ): Promise<PrismaServiceEntity | null> {
    return this.prisma.appointmentServiceItem
      .findUnique({
        where: { id: parentId },
      })
      .serviceEntity();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.appointmentServiceItem
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
