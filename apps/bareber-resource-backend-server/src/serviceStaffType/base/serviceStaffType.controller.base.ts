/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceStaffTypeService } from "../serviceStaffType.service";
import { ServiceStaffTypeCreateInput } from "./ServiceStaffTypeCreateInput";
import { ServiceStaffType } from "./ServiceStaffType";
import { ServiceStaffTypeFindManyArgs } from "./ServiceStaffTypeFindManyArgs";
import { ServiceStaffTypeWhereUniqueInput } from "./ServiceStaffTypeWhereUniqueInput";
import { ServiceStaffTypeUpdateInput } from "./ServiceStaffTypeUpdateInput";

export class ServiceStaffTypeControllerBase {
  constructor(protected readonly service: ServiceStaffTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceStaffType })
  async createServiceStaffType(
    @common.Body() data: ServiceStaffTypeCreateInput
  ): Promise<ServiceStaffType> {
    return await this.service.createServiceStaffType({
      data: {
        ...data,

        services: {
          connect: data.services,
        },

        staffTypes: {
          connect: data.staffTypes,
        },
      },
      select: {
        id: true,

        services: {
          select: {
            id: true,
          },
        },

        staffTypes: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceStaffType] })
  @ApiNestedQuery(ServiceStaffTypeFindManyArgs)
  async serviceStaffTypes(
    @common.Req() request: Request
  ): Promise<ServiceStaffType[]> {
    const args = plainToClass(ServiceStaffTypeFindManyArgs, request.query);
    return this.service.serviceStaffTypes({
      ...args,
      select: {
        id: true,

        services: {
          select: {
            id: true,
          },
        },

        staffTypes: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceStaffType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceStaffType(
    @common.Param() params: ServiceStaffTypeWhereUniqueInput
  ): Promise<ServiceStaffType | null> {
    const result = await this.service.serviceStaffType({
      where: params,
      select: {
        id: true,

        services: {
          select: {
            id: true,
          },
        },

        staffTypes: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceStaffType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceStaffType(
    @common.Param() params: ServiceStaffTypeWhereUniqueInput,
    @common.Body() data: ServiceStaffTypeUpdateInput
  ): Promise<ServiceStaffType | null> {
    try {
      return await this.service.updateServiceStaffType({
        where: params,
        data: {
          ...data,

          services: {
            connect: data.services,
          },

          staffTypes: {
            connect: data.staffTypes,
          },
        },
        select: {
          id: true,

          services: {
            select: {
              id: true,
            },
          },

          staffTypes: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceStaffType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceStaffType(
    @common.Param() params: ServiceStaffTypeWhereUniqueInput
  ): Promise<ServiceStaffType | null> {
    try {
      return await this.service.deleteServiceStaffType({
        where: params,
        select: {
          id: true,

          services: {
            select: {
              id: true,
            },
          },

          staffTypes: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
