/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceStaffType } from "./ServiceStaffType";
import { ServiceStaffTypeCountArgs } from "./ServiceStaffTypeCountArgs";
import { ServiceStaffTypeFindManyArgs } from "./ServiceStaffTypeFindManyArgs";
import { ServiceStaffTypeFindUniqueArgs } from "./ServiceStaffTypeFindUniqueArgs";
import { CreateServiceStaffTypeArgs } from "./CreateServiceStaffTypeArgs";
import { UpdateServiceStaffTypeArgs } from "./UpdateServiceStaffTypeArgs";
import { DeleteServiceStaffTypeArgs } from "./DeleteServiceStaffTypeArgs";
import { Service } from "../../service/base/Service";
import { StaffType } from "../../staffType/base/StaffType";
import { ServiceStaffTypeService } from "../serviceStaffType.service";
@graphql.Resolver(() => ServiceStaffType)
export class ServiceStaffTypeResolverBase {
  constructor(protected readonly service: ServiceStaffTypeService) {}

  async _serviceStaffTypesMeta(
    @graphql.Args() args: ServiceStaffTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceStaffType])
  async serviceStaffTypes(
    @graphql.Args() args: ServiceStaffTypeFindManyArgs
  ): Promise<ServiceStaffType[]> {
    return this.service.serviceStaffTypes(args);
  }

  @graphql.Query(() => ServiceStaffType, { nullable: true })
  async serviceStaffType(
    @graphql.Args() args: ServiceStaffTypeFindUniqueArgs
  ): Promise<ServiceStaffType | null> {
    const result = await this.service.serviceStaffType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceStaffType)
  async createServiceStaffType(
    @graphql.Args() args: CreateServiceStaffTypeArgs
  ): Promise<ServiceStaffType> {
    return await this.service.createServiceStaffType({
      ...args,
      data: {
        ...args.data,

        services: {
          connect: args.data.services,
        },

        staffTypes: {
          connect: args.data.staffTypes,
        },
      },
    });
  }

  @graphql.Mutation(() => ServiceStaffType)
  async updateServiceStaffType(
    @graphql.Args() args: UpdateServiceStaffTypeArgs
  ): Promise<ServiceStaffType | null> {
    try {
      return await this.service.updateServiceStaffType({
        ...args,
        data: {
          ...args.data,

          services: {
            connect: args.data.services,
          },

          staffTypes: {
            connect: args.data.staffTypes,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceStaffType)
  async deleteServiceStaffType(
    @graphql.Args() args: DeleteServiceStaffTypeArgs
  ): Promise<ServiceStaffType | null> {
    try {
      return await this.service.deleteServiceStaffType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Service, {
    nullable: true,
    name: "services",
  })
  async getServices(
    @graphql.Parent() parent: ServiceStaffType
  ): Promise<Service | null> {
    const result = await this.service.getServices(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => StaffType, {
    nullable: true,
    name: "staffTypes",
  })
  async getStaffTypes(
    @graphql.Parent() parent: ServiceStaffType
  ): Promise<StaffType | null> {
    const result = await this.service.getStaffTypes(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
