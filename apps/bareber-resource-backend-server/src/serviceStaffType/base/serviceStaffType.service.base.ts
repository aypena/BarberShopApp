/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ServiceStaffType as PrismaServiceStaffType,
  Service as PrismaService,
  StaffType as PrismaStaffType,
} from "@prisma/client";

export class ServiceStaffTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceStaffTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceStaffType.count(args);
  }

  async serviceStaffTypes(
    args: Prisma.ServiceStaffTypeFindManyArgs
  ): Promise<PrismaServiceStaffType[]> {
    return this.prisma.serviceStaffType.findMany(args);
  }
  async serviceStaffType(
    args: Prisma.ServiceStaffTypeFindUniqueArgs
  ): Promise<PrismaServiceStaffType | null> {
    return this.prisma.serviceStaffType.findUnique(args);
  }
  async createServiceStaffType(
    args: Prisma.ServiceStaffTypeCreateArgs
  ): Promise<PrismaServiceStaffType> {
    return this.prisma.serviceStaffType.create(args);
  }
  async updateServiceStaffType(
    args: Prisma.ServiceStaffTypeUpdateArgs
  ): Promise<PrismaServiceStaffType> {
    return this.prisma.serviceStaffType.update(args);
  }
  async deleteServiceStaffType(
    args: Prisma.ServiceStaffTypeDeleteArgs
  ): Promise<PrismaServiceStaffType> {
    return this.prisma.serviceStaffType.delete(args);
  }

  async getServices(parentId: string): Promise<PrismaService | null> {
    return this.prisma.serviceStaffType
      .findUnique({
        where: { id: parentId },
      })
      .services();
  }

  async getStaffTypes(parentId: string): Promise<PrismaStaffType | null> {
    return this.prisma.serviceStaffType
      .findUnique({
        where: { id: parentId },
      })
      .staffTypes();
  }
}
