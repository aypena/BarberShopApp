/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { AppointmentServiceFindManyArgs } from "../../appointmentService/base/AppointmentServiceFindManyArgs";
import { AppointmentService } from "../../appointmentService/base/AppointmentService";
import { AppointmentServiceWhereUniqueInput } from "../../appointmentService/base/AppointmentServiceWhereUniqueInput";
import { StaffServiceCustomFindManyArgs } from "../../staffServiceCustom/base/StaffServiceCustomFindManyArgs";
import { StaffServiceCustom } from "../../staffServiceCustom/base/StaffServiceCustom";
import { StaffServiceCustomWhereUniqueInput } from "../../staffServiceCustom/base/StaffServiceCustomWhereUniqueInput";
import { UserRoleFindManyArgs } from "../../userRole/base/UserRoleFindManyArgs";
import { UserRole } from "../../userRole/base/UserRole";
import { UserRoleWhereUniqueInput } from "../../userRole/base/UserRoleWhereUniqueInput";
import { UserStaffTypeFindManyArgs } from "../../userStaffType/base/UserStaffTypeFindManyArgs";
import { UserStaffType } from "../../userStaffType/base/UserStaffType";
import { UserStaffTypeWhereUniqueInput } from "../../userStaffType/base/UserStaffTypeWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        activo: true,
        email: true,
        fechaRegistro: true,
        id: true,
        nombre: true,
        passwordHash: true,
        telefono: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        activo: true,
        email: true,
        fechaRegistro: true,
        id: true,
        nombre: true,
        passwordHash: true,
        telefono: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        activo: true,
        email: true,
        fechaRegistro: true,
        id: true,
        nombre: true,
        passwordHash: true,
        telefono: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          activo: true,
          email: true,
          fechaRegistro: true,
          id: true,
          nombre: true,
          passwordHash: true,
          telefono: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          activo: true,
          email: true,
          fechaRegistro: true,
          id: true,
          nombre: true,
          passwordHash: true,
          telefono: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/appointmentServices")
  @ApiNestedQuery(AppointmentServiceFindManyArgs)
  async findAppointmentServices(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<AppointmentService[]> {
    const query = plainToClass(AppointmentServiceFindManyArgs, request.query);
    const results = await this.service.findAppointmentServices(params.id, {
      ...query,
      select: {
        appointments: {
          select: {
            id: true,
          },
        },

        duracionFinalMinutos: true,
        estado: true,
        fechaAgregado: true,
        id: true,
        notas: true,
        precioFinal: true,

        services: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointmentServices")
  async connectAppointmentServices(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AppointmentServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentServices: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointmentServices")
  async updateAppointmentServices(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AppointmentServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentServices: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointmentServices")
  async disconnectAppointmentServices(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AppointmentServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentServices: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/staffServiceCustom")
  @ApiNestedQuery(StaffServiceCustomFindManyArgs)
  async findStaffServiceCustom(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<StaffServiceCustom[]> {
    const query = plainToClass(StaffServiceCustomFindManyArgs, request.query);
    const results = await this.service.findStaffServiceCustom(params.id, {
      ...query,
      select: {
        duracionCustomMinutos: true,
        id: true,
        precioCustom: true,

        services: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/staffServiceCustom")
  async connectStaffServiceCustom(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StaffServiceCustomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffServiceCustom: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/staffServiceCustom")
  async updateStaffServiceCustom(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StaffServiceCustomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffServiceCustom: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/staffServiceCustom")
  async disconnectStaffServiceCustom(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StaffServiceCustomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffServiceCustom: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userRoles")
  @ApiNestedQuery(UserRoleFindManyArgs)
  async findUserRoles(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserRole[]> {
    const query = plainToClass(UserRoleFindManyArgs, request.query);
    const results = await this.service.findUserRoles(params.id, {
      ...query,
      select: {
        assignedAt: true,
        id: true,

        roles: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userRoles")
  async connectUserRoles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserRoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRoles: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userRoles")
  async updateUserRoles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserRoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRoles: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userRoles")
  async disconnectUserRoles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserRoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRoles: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userStaffTypes")
  @ApiNestedQuery(UserStaffTypeFindManyArgs)
  async findUserStaffTypes(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserStaffType[]> {
    const query = plainToClass(UserStaffTypeFindManyArgs, request.query);
    const results = await this.service.findUserStaffTypes(params.id, {
      ...query,
      select: {
        id: true,

        staffTypes: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userStaffTypes")
  async connectUserStaffTypes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserStaffTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userStaffTypes: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userStaffTypes")
  async updateUserStaffTypes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserStaffTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userStaffTypes: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userStaffTypes")
  async disconnectUserStaffTypes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserStaffTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userStaffTypes: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
