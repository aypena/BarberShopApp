/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StaffServiceCustomService } from "../staffServiceCustom.service";
import { StaffServiceCustomCreateInput } from "./StaffServiceCustomCreateInput";
import { StaffServiceCustom } from "./StaffServiceCustom";
import { StaffServiceCustomFindManyArgs } from "./StaffServiceCustomFindManyArgs";
import { StaffServiceCustomWhereUniqueInput } from "./StaffServiceCustomWhereUniqueInput";
import { StaffServiceCustomUpdateInput } from "./StaffServiceCustomUpdateInput";

export class StaffServiceCustomControllerBase {
  constructor(protected readonly service: StaffServiceCustomService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StaffServiceCustom })
  async createStaffServiceCustom(
    @common.Body() data: StaffServiceCustomCreateInput
  ): Promise<StaffServiceCustom> {
    return await this.service.createStaffServiceCustom({
      data: {
        ...data,

        services: {
          connect: data.services,
        },

        users: {
          connect: data.users,
        },
      },
      select: {
        duracionCustomMinutos: true,
        id: true,
        precioCustom: true,

        services: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StaffServiceCustom] })
  @ApiNestedQuery(StaffServiceCustomFindManyArgs)
  async staffServiceCustoms(
    @common.Req() request: Request
  ): Promise<StaffServiceCustom[]> {
    const args = plainToClass(StaffServiceCustomFindManyArgs, request.query);
    return this.service.staffServiceCustoms({
      ...args,
      select: {
        duracionCustomMinutos: true,
        id: true,
        precioCustom: true,

        services: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StaffServiceCustom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async staffServiceCustom(
    @common.Param() params: StaffServiceCustomWhereUniqueInput
  ): Promise<StaffServiceCustom | null> {
    const result = await this.service.staffServiceCustom({
      where: params,
      select: {
        duracionCustomMinutos: true,
        id: true,
        precioCustom: true,

        services: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StaffServiceCustom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStaffServiceCustom(
    @common.Param() params: StaffServiceCustomWhereUniqueInput,
    @common.Body() data: StaffServiceCustomUpdateInput
  ): Promise<StaffServiceCustom | null> {
    try {
      return await this.service.updateStaffServiceCustom({
        where: params,
        data: {
          ...data,

          services: {
            connect: data.services,
          },

          users: {
            connect: data.users,
          },
        },
        select: {
          duracionCustomMinutos: true,
          id: true,
          precioCustom: true,

          services: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StaffServiceCustom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStaffServiceCustom(
    @common.Param() params: StaffServiceCustomWhereUniqueInput
  ): Promise<StaffServiceCustom | null> {
    try {
      return await this.service.deleteStaffServiceCustom({
        where: params,
        select: {
          duracionCustomMinutos: true,
          id: true,
          precioCustom: true,

          services: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
