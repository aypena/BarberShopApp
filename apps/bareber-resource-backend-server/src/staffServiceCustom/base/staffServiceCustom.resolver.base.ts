/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StaffServiceCustom } from "./StaffServiceCustom";
import { StaffServiceCustomCountArgs } from "./StaffServiceCustomCountArgs";
import { StaffServiceCustomFindManyArgs } from "./StaffServiceCustomFindManyArgs";
import { StaffServiceCustomFindUniqueArgs } from "./StaffServiceCustomFindUniqueArgs";
import { CreateStaffServiceCustomArgs } from "./CreateStaffServiceCustomArgs";
import { UpdateStaffServiceCustomArgs } from "./UpdateStaffServiceCustomArgs";
import { DeleteStaffServiceCustomArgs } from "./DeleteStaffServiceCustomArgs";
import { Service } from "../../service/base/Service";
import { User } from "../../user/base/User";
import { StaffServiceCustomService } from "../staffServiceCustom.service";
@graphql.Resolver(() => StaffServiceCustom)
export class StaffServiceCustomResolverBase {
  constructor(protected readonly service: StaffServiceCustomService) {}

  async _staffServiceCustomsMeta(
    @graphql.Args() args: StaffServiceCustomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StaffServiceCustom])
  async staffServiceCustoms(
    @graphql.Args() args: StaffServiceCustomFindManyArgs
  ): Promise<StaffServiceCustom[]> {
    return this.service.staffServiceCustoms(args);
  }

  @graphql.Query(() => StaffServiceCustom, { nullable: true })
  async staffServiceCustom(
    @graphql.Args() args: StaffServiceCustomFindUniqueArgs
  ): Promise<StaffServiceCustom | null> {
    const result = await this.service.staffServiceCustom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StaffServiceCustom)
  async createStaffServiceCustom(
    @graphql.Args() args: CreateStaffServiceCustomArgs
  ): Promise<StaffServiceCustom> {
    return await this.service.createStaffServiceCustom({
      ...args,
      data: {
        ...args.data,

        services: {
          connect: args.data.services,
        },

        users: {
          connect: args.data.users,
        },
      },
    });
  }

  @graphql.Mutation(() => StaffServiceCustom)
  async updateStaffServiceCustom(
    @graphql.Args() args: UpdateStaffServiceCustomArgs
  ): Promise<StaffServiceCustom | null> {
    try {
      return await this.service.updateStaffServiceCustom({
        ...args,
        data: {
          ...args.data,

          services: {
            connect: args.data.services,
          },

          users: {
            connect: args.data.users,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StaffServiceCustom)
  async deleteStaffServiceCustom(
    @graphql.Args() args: DeleteStaffServiceCustomArgs
  ): Promise<StaffServiceCustom | null> {
    try {
      return await this.service.deleteStaffServiceCustom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Service, {
    nullable: true,
    name: "services",
  })
  async getServices(
    @graphql.Parent() parent: StaffServiceCustom
  ): Promise<Service | null> {
    const result = await this.service.getServices(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "users",
  })
  async getUsers(
    @graphql.Parent() parent: StaffServiceCustom
  ): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
