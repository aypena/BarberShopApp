/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceEntity } from "./ServiceEntity";
import { ServiceEntityCountArgs } from "./ServiceEntityCountArgs";
import { ServiceEntityFindManyArgs } from "./ServiceEntityFindManyArgs";
import { ServiceEntityFindUniqueArgs } from "./ServiceEntityFindUniqueArgs";
import { CreateServiceEntityArgs } from "./CreateServiceEntityArgs";
import { UpdateServiceEntityArgs } from "./UpdateServiceEntityArgs";
import { DeleteServiceEntityArgs } from "./DeleteServiceEntityArgs";
import { AppointmentServiceItemFindManyArgs } from "../../appointmentServiceItem/base/AppointmentServiceItemFindManyArgs";
import { AppointmentServiceItem } from "../../appointmentServiceItem/base/AppointmentServiceItem";
import { ServiceStaffLinkFindManyArgs } from "../../serviceStaffLink/base/ServiceStaffLinkFindManyArgs";
import { ServiceStaffLink } from "../../serviceStaffLink/base/ServiceStaffLink";
import { StaffCustomServiceFindManyArgs } from "../../staffCustomService/base/StaffCustomServiceFindManyArgs";
import { StaffCustomService } from "../../staffCustomService/base/StaffCustomService";
import { ServiceEntityService } from "../serviceEntity.service";
@graphql.Resolver(() => ServiceEntity)
export class ServiceEntityResolverBase {
  constructor(protected readonly service: ServiceEntityService) {}

  async _serviceEntitiesMeta(
    @graphql.Args() args: ServiceEntityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceEntity])
  async serviceEntities(
    @graphql.Args() args: ServiceEntityFindManyArgs
  ): Promise<ServiceEntity[]> {
    return this.service.serviceEntities(args);
  }

  @graphql.Query(() => ServiceEntity, { nullable: true })
  async serviceEntity(
    @graphql.Args() args: ServiceEntityFindUniqueArgs
  ): Promise<ServiceEntity | null> {
    const result = await this.service.serviceEntity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceEntity)
  async createServiceEntity(
    @graphql.Args() args: CreateServiceEntityArgs
  ): Promise<ServiceEntity> {
    return await this.service.createServiceEntity({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ServiceEntity)
  async updateServiceEntity(
    @graphql.Args() args: UpdateServiceEntityArgs
  ): Promise<ServiceEntity | null> {
    try {
      return await this.service.updateServiceEntity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceEntity)
  async deleteServiceEntity(
    @graphql.Args() args: DeleteServiceEntityArgs
  ): Promise<ServiceEntity | null> {
    try {
      return await this.service.deleteServiceEntity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AppointmentServiceItem], {
    name: "appointmentServices",
  })
  async findAppointmentServices(
    @graphql.Parent() parent: ServiceEntity,
    @graphql.Args() args: AppointmentServiceItemFindManyArgs
  ): Promise<AppointmentServiceItem[]> {
    const results = await this.service.findAppointmentServices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ServiceStaffLink], { name: "serviceStaffLinks" })
  async findServiceStaffLinks(
    @graphql.Parent() parent: ServiceEntity,
    @graphql.Args() args: ServiceStaffLinkFindManyArgs
  ): Promise<ServiceStaffLink[]> {
    const results = await this.service.findServiceStaffLinks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StaffCustomService], {
    name: "staffCustomServices",
  })
  async findStaffCustomServices(
    @graphql.Parent() parent: ServiceEntity,
    @graphql.Args() args: StaffCustomServiceFindManyArgs
  ): Promise<StaffCustomService[]> {
    const results = await this.service.findStaffCustomServices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
