/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceEntityService } from "../serviceEntity.service";
import { ServiceEntityCreateInput } from "./ServiceEntityCreateInput";
import { ServiceEntity } from "./ServiceEntity";
import { ServiceEntityFindManyArgs } from "./ServiceEntityFindManyArgs";
import { ServiceEntityWhereUniqueInput } from "./ServiceEntityWhereUniqueInput";
import { ServiceEntityUpdateInput } from "./ServiceEntityUpdateInput";
import { AppointmentServiceItemFindManyArgs } from "../../appointmentServiceItem/base/AppointmentServiceItemFindManyArgs";
import { AppointmentServiceItem } from "../../appointmentServiceItem/base/AppointmentServiceItem";
import { AppointmentServiceItemWhereUniqueInput } from "../../appointmentServiceItem/base/AppointmentServiceItemWhereUniqueInput";
import { ServiceStaffLinkFindManyArgs } from "../../serviceStaffLink/base/ServiceStaffLinkFindManyArgs";
import { ServiceStaffLink } from "../../serviceStaffLink/base/ServiceStaffLink";
import { ServiceStaffLinkWhereUniqueInput } from "../../serviceStaffLink/base/ServiceStaffLinkWhereUniqueInput";
import { StaffCustomServiceFindManyArgs } from "../../staffCustomService/base/StaffCustomServiceFindManyArgs";
import { StaffCustomService } from "../../staffCustomService/base/StaffCustomService";
import { StaffCustomServiceWhereUniqueInput } from "../../staffCustomService/base/StaffCustomServiceWhereUniqueInput";

export class ServiceEntityControllerBase {
  constructor(protected readonly service: ServiceEntityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceEntity })
  async createServiceEntity(
    @common.Body() data: ServiceEntityCreateInput
  ): Promise<ServiceEntity> {
    return await this.service.createServiceEntity({
      data: data,
      select: {
        activo: true,
        categoria: true,
        createdAt: true,
        descripcion: true,
        duracionBaseMinutos: true,
        id: true,
        nombre: true,
        precioBase: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceEntity] })
  @ApiNestedQuery(ServiceEntityFindManyArgs)
  async serviceEntities(
    @common.Req() request: Request
  ): Promise<ServiceEntity[]> {
    const args = plainToClass(ServiceEntityFindManyArgs, request.query);
    return this.service.serviceEntities({
      ...args,
      select: {
        activo: true,
        categoria: true,
        createdAt: true,
        descripcion: true,
        duracionBaseMinutos: true,
        id: true,
        nombre: true,
        precioBase: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceEntity(
    @common.Param() params: ServiceEntityWhereUniqueInput
  ): Promise<ServiceEntity | null> {
    const result = await this.service.serviceEntity({
      where: params,
      select: {
        activo: true,
        categoria: true,
        createdAt: true,
        descripcion: true,
        duracionBaseMinutos: true,
        id: true,
        nombre: true,
        precioBase: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceEntity(
    @common.Param() params: ServiceEntityWhereUniqueInput,
    @common.Body() data: ServiceEntityUpdateInput
  ): Promise<ServiceEntity | null> {
    try {
      return await this.service.updateServiceEntity({
        where: params,
        data: data,
        select: {
          activo: true,
          categoria: true,
          createdAt: true,
          descripcion: true,
          duracionBaseMinutos: true,
          id: true,
          nombre: true,
          precioBase: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceEntity(
    @common.Param() params: ServiceEntityWhereUniqueInput
  ): Promise<ServiceEntity | null> {
    try {
      return await this.service.deleteServiceEntity({
        where: params,
        select: {
          activo: true,
          categoria: true,
          createdAt: true,
          descripcion: true,
          duracionBaseMinutos: true,
          id: true,
          nombre: true,
          precioBase: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/appointmentServices")
  @ApiNestedQuery(AppointmentServiceItemFindManyArgs)
  async findAppointmentServices(
    @common.Req() request: Request,
    @common.Param() params: ServiceEntityWhereUniqueInput
  ): Promise<AppointmentServiceItem[]> {
    const query = plainToClass(
      AppointmentServiceItemFindManyArgs,
      request.query
    );
    const results = await this.service.findAppointmentServices(params.id, {
      ...query,
      select: {
        appointment: {
          select: {
            id: true,
          },
        },

        duracionFinalMinutos: true,
        estado: true,
        fechaAgregado: true,
        id: true,
        notas: true,
        precioFinal: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointmentServices")
  async connectAppointmentServices(
    @common.Param() params: ServiceEntityWhereUniqueInput,
    @common.Body() body: AppointmentServiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentServices: {
        connect: body,
      },
    };
    await this.service.updateServiceEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointmentServices")
  async updateAppointmentServices(
    @common.Param() params: ServiceEntityWhereUniqueInput,
    @common.Body() body: AppointmentServiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentServices: {
        set: body,
      },
    };
    await this.service.updateServiceEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointmentServices")
  async disconnectAppointmentServices(
    @common.Param() params: ServiceEntityWhereUniqueInput,
    @common.Body() body: AppointmentServiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentServices: {
        disconnect: body,
      },
    };
    await this.service.updateServiceEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/serviceStaffLinks")
  @ApiNestedQuery(ServiceStaffLinkFindManyArgs)
  async findServiceStaffLinks(
    @common.Req() request: Request,
    @common.Param() params: ServiceEntityWhereUniqueInput
  ): Promise<ServiceStaffLink[]> {
    const query = plainToClass(ServiceStaffLinkFindManyArgs, request.query);
    const results = await this.service.findServiceStaffLinks(params.id, {
      ...query,
      select: {
        id: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        staffType: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/serviceStaffLinks")
  async connectServiceStaffLinks(
    @common.Param() params: ServiceEntityWhereUniqueInput,
    @common.Body() body: ServiceStaffLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStaffLinks: {
        connect: body,
      },
    };
    await this.service.updateServiceEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/serviceStaffLinks")
  async updateServiceStaffLinks(
    @common.Param() params: ServiceEntityWhereUniqueInput,
    @common.Body() body: ServiceStaffLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStaffLinks: {
        set: body,
      },
    };
    await this.service.updateServiceEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/serviceStaffLinks")
  async disconnectServiceStaffLinks(
    @common.Param() params: ServiceEntityWhereUniqueInput,
    @common.Body() body: ServiceStaffLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStaffLinks: {
        disconnect: body,
      },
    };
    await this.service.updateServiceEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/staffCustomServices")
  @ApiNestedQuery(StaffCustomServiceFindManyArgs)
  async findStaffCustomServices(
    @common.Req() request: Request,
    @common.Param() params: ServiceEntityWhereUniqueInput
  ): Promise<StaffCustomService[]> {
    const query = plainToClass(StaffCustomServiceFindManyArgs, request.query);
    const results = await this.service.findStaffCustomServices(params.id, {
      ...query,
      select: {
        duracionCustomMinutos: true,
        id: true,
        precioCustom: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/staffCustomServices")
  async connectStaffCustomServices(
    @common.Param() params: ServiceEntityWhereUniqueInput,
    @common.Body() body: StaffCustomServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffCustomServices: {
        connect: body,
      },
    };
    await this.service.updateServiceEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/staffCustomServices")
  async updateStaffCustomServices(
    @common.Param() params: ServiceEntityWhereUniqueInput,
    @common.Body() body: StaffCustomServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffCustomServices: {
        set: body,
      },
    };
    await this.service.updateServiceEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/staffCustomServices")
  async disconnectStaffCustomServices(
    @common.Param() params: ServiceEntityWhereUniqueInput,
    @common.Body() body: StaffCustomServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffCustomServices: {
        disconnect: body,
      },
    };
    await this.service.updateServiceEntity({
      where: params,
      data,
      select: { id: true },
    });
  }
}
