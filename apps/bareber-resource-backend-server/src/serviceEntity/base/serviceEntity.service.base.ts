/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ServiceEntity as PrismaServiceEntity,
  AppointmentServiceItem as PrismaAppointmentServiceItem,
  ServiceStaffLink as PrismaServiceStaffLink,
  StaffCustomService as PrismaStaffCustomService,
} from "@prisma/client";

export class ServiceEntityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceEntityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceEntity.count(args);
  }

  async serviceEntities(
    args: Prisma.ServiceEntityFindManyArgs
  ): Promise<PrismaServiceEntity[]> {
    return this.prisma.serviceEntity.findMany(args);
  }
  async serviceEntity(
    args: Prisma.ServiceEntityFindUniqueArgs
  ): Promise<PrismaServiceEntity | null> {
    return this.prisma.serviceEntity.findUnique(args);
  }
  async createServiceEntity(
    args: Prisma.ServiceEntityCreateArgs
  ): Promise<PrismaServiceEntity> {
    return this.prisma.serviceEntity.create(args);
  }
  async updateServiceEntity(
    args: Prisma.ServiceEntityUpdateArgs
  ): Promise<PrismaServiceEntity> {
    return this.prisma.serviceEntity.update(args);
  }
  async deleteServiceEntity(
    args: Prisma.ServiceEntityDeleteArgs
  ): Promise<PrismaServiceEntity> {
    return this.prisma.serviceEntity.delete(args);
  }

  async findAppointmentServices(
    parentId: string,
    args: Prisma.AppointmentServiceItemFindManyArgs
  ): Promise<PrismaAppointmentServiceItem[]> {
    return this.prisma.serviceEntity
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointmentServices(args);
  }

  async findServiceStaffLinks(
    parentId: string,
    args: Prisma.ServiceStaffLinkFindManyArgs
  ): Promise<PrismaServiceStaffLink[]> {
    return this.prisma.serviceEntity
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .serviceStaffLinks(args);
  }

  async findStaffCustomServices(
    parentId: string,
    args: Prisma.StaffCustomServiceFindManyArgs
  ): Promise<PrismaStaffCustomService[]> {
    return this.prisma.serviceEntity
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .staffCustomServices(args);
  }
}
