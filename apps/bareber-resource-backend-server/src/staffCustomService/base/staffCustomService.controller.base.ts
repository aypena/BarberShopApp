/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StaffCustomServiceService } from "../staffCustomService.service";
import { StaffCustomServiceCreateInput } from "./StaffCustomServiceCreateInput";
import { StaffCustomService } from "./StaffCustomService";
import { StaffCustomServiceFindManyArgs } from "./StaffCustomServiceFindManyArgs";
import { StaffCustomServiceWhereUniqueInput } from "./StaffCustomServiceWhereUniqueInput";
import { StaffCustomServiceUpdateInput } from "./StaffCustomServiceUpdateInput";

export class StaffCustomServiceControllerBase {
  constructor(protected readonly service: StaffCustomServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StaffCustomService })
  async createStaffCustomService(
    @common.Body() data: StaffCustomServiceCreateInput
  ): Promise<StaffCustomService> {
    return await this.service.createStaffCustomService({
      data: {
        ...data,

        serviceEntity: {
          connect: data.serviceEntity,
        },

        user: {
          connect: data.user,
        },
      },
      select: {
        duracionCustomMinutos: true,
        id: true,
        precioCustom: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StaffCustomService] })
  @ApiNestedQuery(StaffCustomServiceFindManyArgs)
  async staffCustomServices(
    @common.Req() request: Request
  ): Promise<StaffCustomService[]> {
    const args = plainToClass(StaffCustomServiceFindManyArgs, request.query);
    return this.service.staffCustomServices({
      ...args,
      select: {
        duracionCustomMinutos: true,
        id: true,
        precioCustom: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StaffCustomService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async staffCustomService(
    @common.Param() params: StaffCustomServiceWhereUniqueInput
  ): Promise<StaffCustomService | null> {
    const result = await this.service.staffCustomService({
      where: params,
      select: {
        duracionCustomMinutos: true,
        id: true,
        precioCustom: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StaffCustomService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStaffCustomService(
    @common.Param() params: StaffCustomServiceWhereUniqueInput,
    @common.Body() data: StaffCustomServiceUpdateInput
  ): Promise<StaffCustomService | null> {
    try {
      return await this.service.updateStaffCustomService({
        where: params,
        data: {
          ...data,

          serviceEntity: {
            connect: data.serviceEntity,
          },

          user: {
            connect: data.user,
          },
        },
        select: {
          duracionCustomMinutos: true,
          id: true,
          precioCustom: true,

          serviceEntity: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StaffCustomService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStaffCustomService(
    @common.Param() params: StaffCustomServiceWhereUniqueInput
  ): Promise<StaffCustomService | null> {
    try {
      return await this.service.deleteStaffCustomService({
        where: params,
        select: {
          duracionCustomMinutos: true,
          id: true,
          precioCustom: true,

          serviceEntity: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
