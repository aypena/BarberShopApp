/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StaffCustomService } from "./StaffCustomService";
import { StaffCustomServiceCountArgs } from "./StaffCustomServiceCountArgs";
import { StaffCustomServiceFindManyArgs } from "./StaffCustomServiceFindManyArgs";
import { StaffCustomServiceFindUniqueArgs } from "./StaffCustomServiceFindUniqueArgs";
import { CreateStaffCustomServiceArgs } from "./CreateStaffCustomServiceArgs";
import { UpdateStaffCustomServiceArgs } from "./UpdateStaffCustomServiceArgs";
import { DeleteStaffCustomServiceArgs } from "./DeleteStaffCustomServiceArgs";
import { ServiceEntity } from "../../serviceEntity/base/ServiceEntity";
import { User } from "../../user/base/User";
import { StaffCustomServiceService } from "../staffCustomService.service";
@graphql.Resolver(() => StaffCustomService)
export class StaffCustomServiceResolverBase {
  constructor(protected readonly service: StaffCustomServiceService) {}

  async _staffCustomServicesMeta(
    @graphql.Args() args: StaffCustomServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StaffCustomService])
  async staffCustomServices(
    @graphql.Args() args: StaffCustomServiceFindManyArgs
  ): Promise<StaffCustomService[]> {
    return this.service.staffCustomServices(args);
  }

  @graphql.Query(() => StaffCustomService, { nullable: true })
  async staffCustomService(
    @graphql.Args() args: StaffCustomServiceFindUniqueArgs
  ): Promise<StaffCustomService | null> {
    const result = await this.service.staffCustomService(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StaffCustomService)
  async createStaffCustomService(
    @graphql.Args() args: CreateStaffCustomServiceArgs
  ): Promise<StaffCustomService> {
    return await this.service.createStaffCustomService({
      ...args,
      data: {
        ...args.data,

        serviceEntity: {
          connect: args.data.serviceEntity,
        },

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @graphql.Mutation(() => StaffCustomService)
  async updateStaffCustomService(
    @graphql.Args() args: UpdateStaffCustomServiceArgs
  ): Promise<StaffCustomService | null> {
    try {
      return await this.service.updateStaffCustomService({
        ...args,
        data: {
          ...args.data,

          serviceEntity: {
            connect: args.data.serviceEntity,
          },

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StaffCustomService)
  async deleteStaffCustomService(
    @graphql.Args() args: DeleteStaffCustomServiceArgs
  ): Promise<StaffCustomService | null> {
    try {
      return await this.service.deleteStaffCustomService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ServiceEntity, {
    nullable: true,
    name: "serviceEntity",
  })
  async getServiceEntity(
    @graphql.Parent() parent: StaffCustomService
  ): Promise<ServiceEntity | null> {
    const result = await this.service.getServiceEntity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: StaffCustomService
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
