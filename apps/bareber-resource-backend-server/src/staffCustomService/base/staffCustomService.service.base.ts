/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StaffCustomService as PrismaStaffCustomService,
  ServiceEntity as PrismaServiceEntity,
  User as PrismaUser,
} from "@prisma/client";

export class StaffCustomServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StaffCustomServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.staffCustomService.count(args);
  }

  async staffCustomServices(
    args: Prisma.StaffCustomServiceFindManyArgs
  ): Promise<PrismaStaffCustomService[]> {
    return this.prisma.staffCustomService.findMany(args);
  }
  async staffCustomService(
    args: Prisma.StaffCustomServiceFindUniqueArgs
  ): Promise<PrismaStaffCustomService | null> {
    return this.prisma.staffCustomService.findUnique(args);
  }
  async createStaffCustomService(
    args: Prisma.StaffCustomServiceCreateArgs
  ): Promise<PrismaStaffCustomService> {
    return this.prisma.staffCustomService.create(args);
  }
  async updateStaffCustomService(
    args: Prisma.StaffCustomServiceUpdateArgs
  ): Promise<PrismaStaffCustomService> {
    return this.prisma.staffCustomService.update(args);
  }
  async deleteStaffCustomService(
    args: Prisma.StaffCustomServiceDeleteArgs
  ): Promise<PrismaStaffCustomService> {
    return this.prisma.staffCustomService.delete(args);
  }

  async getServiceEntity(
    parentId: string
  ): Promise<PrismaServiceEntity | null> {
    return this.prisma.staffCustomService
      .findUnique({
        where: { id: parentId },
      })
      .serviceEntity();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.staffCustomService
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
