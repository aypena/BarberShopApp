/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceStaffLink } from "./ServiceStaffLink";
import { ServiceStaffLinkCountArgs } from "./ServiceStaffLinkCountArgs";
import { ServiceStaffLinkFindManyArgs } from "./ServiceStaffLinkFindManyArgs";
import { ServiceStaffLinkFindUniqueArgs } from "./ServiceStaffLinkFindUniqueArgs";
import { CreateServiceStaffLinkArgs } from "./CreateServiceStaffLinkArgs";
import { UpdateServiceStaffLinkArgs } from "./UpdateServiceStaffLinkArgs";
import { DeleteServiceStaffLinkArgs } from "./DeleteServiceStaffLinkArgs";
import { ServiceEntity } from "../../serviceEntity/base/ServiceEntity";
import { StaffType } from "../../staffType/base/StaffType";
import { ServiceStaffLinkService } from "../serviceStaffLink.service";
@graphql.Resolver(() => ServiceStaffLink)
export class ServiceStaffLinkResolverBase {
  constructor(protected readonly service: ServiceStaffLinkService) {}

  async _serviceStaffLinksMeta(
    @graphql.Args() args: ServiceStaffLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceStaffLink])
  async serviceStaffLinks(
    @graphql.Args() args: ServiceStaffLinkFindManyArgs
  ): Promise<ServiceStaffLink[]> {
    return this.service.serviceStaffLinks(args);
  }

  @graphql.Query(() => ServiceStaffLink, { nullable: true })
  async serviceStaffLink(
    @graphql.Args() args: ServiceStaffLinkFindUniqueArgs
  ): Promise<ServiceStaffLink | null> {
    const result = await this.service.serviceStaffLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceStaffLink)
  async createServiceStaffLink(
    @graphql.Args() args: CreateServiceStaffLinkArgs
  ): Promise<ServiceStaffLink> {
    return await this.service.createServiceStaffLink({
      ...args,
      data: {
        ...args.data,

        serviceEntity: {
          connect: args.data.serviceEntity,
        },

        staffType: {
          connect: args.data.staffType,
        },
      },
    });
  }

  @graphql.Mutation(() => ServiceStaffLink)
  async updateServiceStaffLink(
    @graphql.Args() args: UpdateServiceStaffLinkArgs
  ): Promise<ServiceStaffLink | null> {
    try {
      return await this.service.updateServiceStaffLink({
        ...args,
        data: {
          ...args.data,

          serviceEntity: {
            connect: args.data.serviceEntity,
          },

          staffType: {
            connect: args.data.staffType,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceStaffLink)
  async deleteServiceStaffLink(
    @graphql.Args() args: DeleteServiceStaffLinkArgs
  ): Promise<ServiceStaffLink | null> {
    try {
      return await this.service.deleteServiceStaffLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ServiceEntity, {
    nullable: true,
    name: "serviceEntity",
  })
  async getServiceEntity(
    @graphql.Parent() parent: ServiceStaffLink
  ): Promise<ServiceEntity | null> {
    const result = await this.service.getServiceEntity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => StaffType, {
    nullable: true,
    name: "staffType",
  })
  async getStaffType(
    @graphql.Parent() parent: ServiceStaffLink
  ): Promise<StaffType | null> {
    const result = await this.service.getStaffType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
