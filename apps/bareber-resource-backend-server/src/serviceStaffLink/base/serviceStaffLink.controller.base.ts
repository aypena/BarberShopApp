/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceStaffLinkService } from "../serviceStaffLink.service";
import { ServiceStaffLinkCreateInput } from "./ServiceStaffLinkCreateInput";
import { ServiceStaffLink } from "./ServiceStaffLink";
import { ServiceStaffLinkFindManyArgs } from "./ServiceStaffLinkFindManyArgs";
import { ServiceStaffLinkWhereUniqueInput } from "./ServiceStaffLinkWhereUniqueInput";
import { ServiceStaffLinkUpdateInput } from "./ServiceStaffLinkUpdateInput";

export class ServiceStaffLinkControllerBase {
  constructor(protected readonly service: ServiceStaffLinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceStaffLink })
  async createServiceStaffLink(
    @common.Body() data: ServiceStaffLinkCreateInput
  ): Promise<ServiceStaffLink> {
    return await this.service.createServiceStaffLink({
      data: {
        ...data,

        serviceEntity: {
          connect: data.serviceEntity,
        },

        staffType: {
          connect: data.staffType,
        },
      },
      select: {
        id: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        staffType: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceStaffLink] })
  @ApiNestedQuery(ServiceStaffLinkFindManyArgs)
  async serviceStaffLinks(
    @common.Req() request: Request
  ): Promise<ServiceStaffLink[]> {
    const args = plainToClass(ServiceStaffLinkFindManyArgs, request.query);
    return this.service.serviceStaffLinks({
      ...args,
      select: {
        id: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        staffType: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceStaffLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceStaffLink(
    @common.Param() params: ServiceStaffLinkWhereUniqueInput
  ): Promise<ServiceStaffLink | null> {
    const result = await this.service.serviceStaffLink({
      where: params,
      select: {
        id: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        staffType: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceStaffLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceStaffLink(
    @common.Param() params: ServiceStaffLinkWhereUniqueInput,
    @common.Body() data: ServiceStaffLinkUpdateInput
  ): Promise<ServiceStaffLink | null> {
    try {
      return await this.service.updateServiceStaffLink({
        where: params,
        data: {
          ...data,

          serviceEntity: {
            connect: data.serviceEntity,
          },

          staffType: {
            connect: data.staffType,
          },
        },
        select: {
          id: true,

          serviceEntity: {
            select: {
              id: true,
            },
          },

          staffType: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceStaffLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceStaffLink(
    @common.Param() params: ServiceStaffLinkWhereUniqueInput
  ): Promise<ServiceStaffLink | null> {
    try {
      return await this.service.deleteServiceStaffLink({
        where: params,
        select: {
          id: true,

          serviceEntity: {
            select: {
              id: true,
            },
          },

          staffType: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
