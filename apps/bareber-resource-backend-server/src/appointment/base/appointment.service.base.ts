/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Appointment as PrismaAppointment,
  AppointmentService as PrismaAppointmentService,
  Notification as PrismaNotification,
  Payment as PrismaPayment,
  Client as PrismaClient,
} from "@prisma/client";

export class AppointmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AppointmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.appointment.count(args);
  }

  async appointments(
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.appointment.findMany(args);
  }
  async appointment(
    args: Prisma.AppointmentFindUniqueArgs
  ): Promise<PrismaAppointment | null> {
    return this.prisma.appointment.findUnique(args);
  }
  async createAppointment(
    args: Prisma.AppointmentCreateArgs
  ): Promise<PrismaAppointment> {
    return this.prisma.appointment.create(args);
  }
  async updateAppointment(
    args: Prisma.AppointmentUpdateArgs
  ): Promise<PrismaAppointment> {
    return this.prisma.appointment.update(args);
  }
  async deleteAppointment(
    args: Prisma.AppointmentDeleteArgs
  ): Promise<PrismaAppointment> {
    return this.prisma.appointment.delete(args);
  }

  async findAppointmentServices(
    parentId: string,
    args: Prisma.AppointmentServiceFindManyArgs
  ): Promise<PrismaAppointmentService[]> {
    return this.prisma.appointment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointmentServices(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.appointment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.appointment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async getClients(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.appointment
      .findUnique({
        where: { id: parentId },
      })
      .clients();
  }
}
