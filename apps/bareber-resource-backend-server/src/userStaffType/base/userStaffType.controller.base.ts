/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserStaffTypeService } from "../userStaffType.service";
import { UserStaffTypeCreateInput } from "./UserStaffTypeCreateInput";
import { UserStaffType } from "./UserStaffType";
import { UserStaffTypeFindManyArgs } from "./UserStaffTypeFindManyArgs";
import { UserStaffTypeWhereUniqueInput } from "./UserStaffTypeWhereUniqueInput";
import { UserStaffTypeUpdateInput } from "./UserStaffTypeUpdateInput";

export class UserStaffTypeControllerBase {
  constructor(protected readonly service: UserStaffTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserStaffType })
  async createUserStaffType(
    @common.Body() data: UserStaffTypeCreateInput
  ): Promise<UserStaffType> {
    return await this.service.createUserStaffType({
      data: {
        ...data,

        staffType: {
          connect: data.staffType,
        },

        user: {
          connect: data.user,
        },
      },
      select: {
        id: true,

        staffType: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserStaffType] })
  @ApiNestedQuery(UserStaffTypeFindManyArgs)
  async userStaffTypes(
    @common.Req() request: Request
  ): Promise<UserStaffType[]> {
    const args = plainToClass(UserStaffTypeFindManyArgs, request.query);
    return this.service.userStaffTypes({
      ...args,
      select: {
        id: true,

        staffType: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserStaffType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userStaffType(
    @common.Param() params: UserStaffTypeWhereUniqueInput
  ): Promise<UserStaffType | null> {
    const result = await this.service.userStaffType({
      where: params,
      select: {
        id: true,

        staffType: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserStaffType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserStaffType(
    @common.Param() params: UserStaffTypeWhereUniqueInput,
    @common.Body() data: UserStaffTypeUpdateInput
  ): Promise<UserStaffType | null> {
    try {
      return await this.service.updateUserStaffType({
        where: params,
        data: {
          ...data,

          staffType: {
            connect: data.staffType,
          },

          user: {
            connect: data.user,
          },
        },
        select: {
          id: true,

          staffType: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserStaffType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserStaffType(
    @common.Param() params: UserStaffTypeWhereUniqueInput
  ): Promise<UserStaffType | null> {
    try {
      return await this.service.deleteUserStaffType({
        where: params,
        select: {
          id: true,

          staffType: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
