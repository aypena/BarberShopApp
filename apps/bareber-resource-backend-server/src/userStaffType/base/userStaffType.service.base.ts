/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserStaffType as PrismaUserStaffType,
  StaffType as PrismaStaffType,
  User as PrismaUser,
} from "@prisma/client";

export class UserStaffTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserStaffTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userStaffType.count(args);
  }

  async userStaffTypes(
    args: Prisma.UserStaffTypeFindManyArgs
  ): Promise<PrismaUserStaffType[]> {
    return this.prisma.userStaffType.findMany(args);
  }
  async userStaffType(
    args: Prisma.UserStaffTypeFindUniqueArgs
  ): Promise<PrismaUserStaffType | null> {
    return this.prisma.userStaffType.findUnique(args);
  }
  async createUserStaffType(
    args: Prisma.UserStaffTypeCreateArgs
  ): Promise<PrismaUserStaffType> {
    return this.prisma.userStaffType.create(args);
  }
  async updateUserStaffType(
    args: Prisma.UserStaffTypeUpdateArgs
  ): Promise<PrismaUserStaffType> {
    return this.prisma.userStaffType.update(args);
  }
  async deleteUserStaffType(
    args: Prisma.UserStaffTypeDeleteArgs
  ): Promise<PrismaUserStaffType> {
    return this.prisma.userStaffType.delete(args);
  }

  async getStaffTypes(parentId: string): Promise<PrismaStaffType | null> {
    return this.prisma.userStaffType
      .findUnique({
        where: { id: parentId },
      })
      .staffTypes();
  }

  async getUsers(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userStaffType
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
