/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserStaffType } from "./UserStaffType";
import { UserStaffTypeCountArgs } from "./UserStaffTypeCountArgs";
import { UserStaffTypeFindManyArgs } from "./UserStaffTypeFindManyArgs";
import { UserStaffTypeFindUniqueArgs } from "./UserStaffTypeFindUniqueArgs";
import { CreateUserStaffTypeArgs } from "./CreateUserStaffTypeArgs";
import { UpdateUserStaffTypeArgs } from "./UpdateUserStaffTypeArgs";
import { DeleteUserStaffTypeArgs } from "./DeleteUserStaffTypeArgs";
import { StaffType } from "../../staffType/base/StaffType";
import { User } from "../../user/base/User";
import { UserStaffTypeService } from "../userStaffType.service";
@graphql.Resolver(() => UserStaffType)
export class UserStaffTypeResolverBase {
  constructor(protected readonly service: UserStaffTypeService) {}

  async _userStaffTypesMeta(
    @graphql.Args() args: UserStaffTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserStaffType])
  async userStaffTypes(
    @graphql.Args() args: UserStaffTypeFindManyArgs
  ): Promise<UserStaffType[]> {
    return this.service.userStaffTypes(args);
  }

  @graphql.Query(() => UserStaffType, { nullable: true })
  async userStaffType(
    @graphql.Args() args: UserStaffTypeFindUniqueArgs
  ): Promise<UserStaffType | null> {
    const result = await this.service.userStaffType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserStaffType)
  async createUserStaffType(
    @graphql.Args() args: CreateUserStaffTypeArgs
  ): Promise<UserStaffType> {
    return await this.service.createUserStaffType({
      ...args,
      data: {
        ...args.data,

        staffTypes: {
          connect: args.data.staffTypes,
        },

        users: {
          connect: args.data.users,
        },
      },
    });
  }

  @graphql.Mutation(() => UserStaffType)
  async updateUserStaffType(
    @graphql.Args() args: UpdateUserStaffTypeArgs
  ): Promise<UserStaffType | null> {
    try {
      return await this.service.updateUserStaffType({
        ...args,
        data: {
          ...args.data,

          staffTypes: {
            connect: args.data.staffTypes,
          },

          users: {
            connect: args.data.users,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserStaffType)
  async deleteUserStaffType(
    @graphql.Args() args: DeleteUserStaffTypeArgs
  ): Promise<UserStaffType | null> {
    try {
      return await this.service.deleteUserStaffType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StaffType, {
    nullable: true,
    name: "staffTypes",
  })
  async getStaffTypes(
    @graphql.Parent() parent: UserStaffType
  ): Promise<StaffType | null> {
    const result = await this.service.getStaffTypes(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "users",
  })
  async getUsers(
    @graphql.Parent() parent: UserStaffType
  ): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
