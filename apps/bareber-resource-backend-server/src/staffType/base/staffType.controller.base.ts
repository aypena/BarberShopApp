/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StaffTypeService } from "../staffType.service";
import { StaffTypeCreateInput } from "./StaffTypeCreateInput";
import { StaffType } from "./StaffType";
import { StaffTypeFindManyArgs } from "./StaffTypeFindManyArgs";
import { StaffTypeWhereUniqueInput } from "./StaffTypeWhereUniqueInput";
import { StaffTypeUpdateInput } from "./StaffTypeUpdateInput";
import { ServiceStaffLinkFindManyArgs } from "../../serviceStaffLink/base/ServiceStaffLinkFindManyArgs";
import { ServiceStaffLink } from "../../serviceStaffLink/base/ServiceStaffLink";
import { ServiceStaffLinkWhereUniqueInput } from "../../serviceStaffLink/base/ServiceStaffLinkWhereUniqueInput";
import { UserStaffTypeFindManyArgs } from "../../userStaffType/base/UserStaffTypeFindManyArgs";
import { UserStaffType } from "../../userStaffType/base/UserStaffType";
import { UserStaffTypeWhereUniqueInput } from "../../userStaffType/base/UserStaffTypeWhereUniqueInput";

export class StaffTypeControllerBase {
  constructor(protected readonly service: StaffTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StaffType })
  async createStaffType(
    @common.Body() data: StaffTypeCreateInput
  ): Promise<StaffType> {
    return await this.service.createStaffType({
      data: data,
      select: {
        descripcion: true,
        id: true,
        nombre: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StaffType] })
  @ApiNestedQuery(StaffTypeFindManyArgs)
  async staffTypes(@common.Req() request: Request): Promise<StaffType[]> {
    const args = plainToClass(StaffTypeFindManyArgs, request.query);
    return this.service.staffTypes({
      ...args,
      select: {
        descripcion: true,
        id: true,
        nombre: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StaffType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async staffType(
    @common.Param() params: StaffTypeWhereUniqueInput
  ): Promise<StaffType | null> {
    const result = await this.service.staffType({
      where: params,
      select: {
        descripcion: true,
        id: true,
        nombre: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StaffType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStaffType(
    @common.Param() params: StaffTypeWhereUniqueInput,
    @common.Body() data: StaffTypeUpdateInput
  ): Promise<StaffType | null> {
    try {
      return await this.service.updateStaffType({
        where: params,
        data: data,
        select: {
          descripcion: true,
          id: true,
          nombre: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StaffType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStaffType(
    @common.Param() params: StaffTypeWhereUniqueInput
  ): Promise<StaffType | null> {
    try {
      return await this.service.deleteStaffType({
        where: params,
        select: {
          descripcion: true,
          id: true,
          nombre: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/serviceStaffLinks")
  @ApiNestedQuery(ServiceStaffLinkFindManyArgs)
  async findServiceStaffLinks(
    @common.Req() request: Request,
    @common.Param() params: StaffTypeWhereUniqueInput
  ): Promise<ServiceStaffLink[]> {
    const query = plainToClass(ServiceStaffLinkFindManyArgs, request.query);
    const results = await this.service.findServiceStaffLinks(params.id, {
      ...query,
      select: {
        id: true,

        serviceEntity: {
          select: {
            id: true,
          },
        },

        staffType: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/serviceStaffLinks")
  async connectServiceStaffLinks(
    @common.Param() params: StaffTypeWhereUniqueInput,
    @common.Body() body: ServiceStaffLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStaffLinks: {
        connect: body,
      },
    };
    await this.service.updateStaffType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/serviceStaffLinks")
  async updateServiceStaffLinks(
    @common.Param() params: StaffTypeWhereUniqueInput,
    @common.Body() body: ServiceStaffLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStaffLinks: {
        set: body,
      },
    };
    await this.service.updateStaffType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/serviceStaffLinks")
  async disconnectServiceStaffLinks(
    @common.Param() params: StaffTypeWhereUniqueInput,
    @common.Body() body: ServiceStaffLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStaffLinks: {
        disconnect: body,
      },
    };
    await this.service.updateStaffType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userStaffTypes")
  @ApiNestedQuery(UserStaffTypeFindManyArgs)
  async findUserStaffTypes(
    @common.Req() request: Request,
    @common.Param() params: StaffTypeWhereUniqueInput
  ): Promise<UserStaffType[]> {
    const query = plainToClass(UserStaffTypeFindManyArgs, request.query);
    const results = await this.service.findUserStaffTypes(params.id, {
      ...query,
      select: {
        id: true,

        staffType: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userStaffTypes")
  async connectUserStaffTypes(
    @common.Param() params: StaffTypeWhereUniqueInput,
    @common.Body() body: UserStaffTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userStaffTypes: {
        connect: body,
      },
    };
    await this.service.updateStaffType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userStaffTypes")
  async updateUserStaffTypes(
    @common.Param() params: StaffTypeWhereUniqueInput,
    @common.Body() body: UserStaffTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userStaffTypes: {
        set: body,
      },
    };
    await this.service.updateStaffType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userStaffTypes")
  async disconnectUserStaffTypes(
    @common.Param() params: StaffTypeWhereUniqueInput,
    @common.Body() body: UserStaffTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userStaffTypes: {
        disconnect: body,
      },
    };
    await this.service.updateStaffType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
