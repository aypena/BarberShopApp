/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StaffType } from "./StaffType";
import { StaffTypeCountArgs } from "./StaffTypeCountArgs";
import { StaffTypeFindManyArgs } from "./StaffTypeFindManyArgs";
import { StaffTypeFindUniqueArgs } from "./StaffTypeFindUniqueArgs";
import { CreateStaffTypeArgs } from "./CreateStaffTypeArgs";
import { UpdateStaffTypeArgs } from "./UpdateStaffTypeArgs";
import { DeleteStaffTypeArgs } from "./DeleteStaffTypeArgs";
import { ServiceStaffLinkFindManyArgs } from "../../serviceStaffLink/base/ServiceStaffLinkFindManyArgs";
import { ServiceStaffLink } from "../../serviceStaffLink/base/ServiceStaffLink";
import { UserStaffTypeFindManyArgs } from "../../userStaffType/base/UserStaffTypeFindManyArgs";
import { UserStaffType } from "../../userStaffType/base/UserStaffType";
import { StaffTypeService } from "../staffType.service";
@graphql.Resolver(() => StaffType)
export class StaffTypeResolverBase {
  constructor(protected readonly service: StaffTypeService) {}

  async _staffTypesMeta(
    @graphql.Args() args: StaffTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StaffType])
  async staffTypes(
    @graphql.Args() args: StaffTypeFindManyArgs
  ): Promise<StaffType[]> {
    return this.service.staffTypes(args);
  }

  @graphql.Query(() => StaffType, { nullable: true })
  async staffType(
    @graphql.Args() args: StaffTypeFindUniqueArgs
  ): Promise<StaffType | null> {
    const result = await this.service.staffType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StaffType)
  async createStaffType(
    @graphql.Args() args: CreateStaffTypeArgs
  ): Promise<StaffType> {
    return await this.service.createStaffType({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StaffType)
  async updateStaffType(
    @graphql.Args() args: UpdateStaffTypeArgs
  ): Promise<StaffType | null> {
    try {
      return await this.service.updateStaffType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StaffType)
  async deleteStaffType(
    @graphql.Args() args: DeleteStaffTypeArgs
  ): Promise<StaffType | null> {
    try {
      return await this.service.deleteStaffType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ServiceStaffLink], { name: "serviceStaffLinks" })
  async findServiceStaffLinks(
    @graphql.Parent() parent: StaffType,
    @graphql.Args() args: ServiceStaffLinkFindManyArgs
  ): Promise<ServiceStaffLink[]> {
    const results = await this.service.findServiceStaffLinks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserStaffType], { name: "userStaffTypes" })
  async findUserStaffTypes(
    @graphql.Parent() parent: StaffType,
    @graphql.Args() args: UserStaffTypeFindManyArgs
  ): Promise<UserStaffType[]> {
    const results = await this.service.findUserStaffTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
