/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StaffType as PrismaStaffType,
  ServiceStaffType as PrismaServiceStaffType,
  UserStaffType as PrismaUserStaffType,
} from "@prisma/client";

export class StaffTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StaffTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.staffType.count(args);
  }

  async staffTypes(
    args: Prisma.StaffTypeFindManyArgs
  ): Promise<PrismaStaffType[]> {
    return this.prisma.staffType.findMany(args);
  }
  async staffType(
    args: Prisma.StaffTypeFindUniqueArgs
  ): Promise<PrismaStaffType | null> {
    return this.prisma.staffType.findUnique(args);
  }
  async createStaffType(
    args: Prisma.StaffTypeCreateArgs
  ): Promise<PrismaStaffType> {
    return this.prisma.staffType.create(args);
  }
  async updateStaffType(
    args: Prisma.StaffTypeUpdateArgs
  ): Promise<PrismaStaffType> {
    return this.prisma.staffType.update(args);
  }
  async deleteStaffType(
    args: Prisma.StaffTypeDeleteArgs
  ): Promise<PrismaStaffType> {
    return this.prisma.staffType.delete(args);
  }

  async findServiceStaffTypes(
    parentId: string,
    args: Prisma.ServiceStaffTypeFindManyArgs
  ): Promise<PrismaServiceStaffType[]> {
    return this.prisma.staffType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .serviceStaffTypes(args);
  }

  async findUserStaffTypes(
    parentId: string,
    args: Prisma.UserStaffTypeFindManyArgs
  ): Promise<PrismaUserStaffType[]> {
    return this.prisma.staffType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userStaffTypes(args);
  }
}
